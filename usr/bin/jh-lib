#!/usr/bin/env bash

#
# Configs
#
#

# For Debug easy (https://wiki.bash-hackers.org/scripting/debuggingtips)
export PS4='\033[0;33m+${BASH_SOURCE[0]: -10}:${LINENO}:\033[0m ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# ... src/
export JH_SRC

# ...src/packages
export JH_PKG_FOLDER

export JH_PKG_INITIAL="jehon"

# relative to +1 script
export JH_SWD

export JH_MSG_OK
export JH_MSG_KO

#
# JH_SWD (Script Working Directory)
#   where the script currently execute
#
#   /usr/(s)bin
#   ~/src/packages/$JH_PKG_INITIAL/usr/(s)bin
#
JH_SWD="$(realpath "$(dirname "${BASH_SOURCE[1]}")")"

#
# Where is this file located ?
#
SELF="$(realpath "${BASH_SOURCE[0]}")"

#
#
# Where is the package source file located
#
#
JH_PKG_FOLDER="$(dirname "$(dirname "$(dirname "$SELF")")")"
# If SELF is as /usr/bin, then it is not under package source
if [ "$JH_PKG_FOLDER" = "/" ]; then
    JH_PKG_FOLDER=""
fi
JH_SRC="$(dirname "$JH_PKG_FOLDER")"

#
# Get the config file location (relative to /usr/share/jehon/)
#
#   /usr/(s)bin => $1
#   ~/src/packages/... => packages/$JH_PKG_INITIAL/usr/share/$JH_PKG_INITIAL/etc/$(basename)
#
#
jhGetConfigFile() {
    if [ -z "$JH_PKG_FOLDER" ]; then
        echo "$1"
        return 0
    fi

    CONF_DIR="$JH_PKG_FOLDER/usr/share/$JH_PKG_INITIAL"
    if [ -a "${CONF_DIR}$1" ]; then
        echo "${CONF_DIR}$1"
        return 0
    fi

    echo "$1"
    return 0
}

#
# Get the shared file location (relative to ROOT/jehon)
# ex: /usr/share/jehon/hyperv/
#
#
jhGetSharedFile() {
    if [ -z "$JH_PKG_FOLDER" ]; then
        echo "$1"
        return 0
    fi

    CONF_DIR="$JH_PKG_FOLDER"

    if [ -a "${CONF_DIR}$1" ]; then
        echo "${CONF_DIR}$1"
        return 0
    fi

    echo "$1"
    return 0
}

header() {
    if test -t 1; then
        echo -e "\e[93m$*\e[00m"
    else
        echo "* $*"
    fi
}

# For recursion of header_start / header_done
export CR_HEADER_PREFIX="*$CR_HEADER_PREFIX"

header_start() {
    LASTMSG="$*"
    echo -e "\e[93m$CR_HEADER_PREFIX $*...\e[00m"
}

header_done() {
    echo -e "\e[93m$CR_HEADER_PREFIX $LASTMSG done\e[00m"
}

warning() {
    if test -t 1; then
        echo -e "\e[91m$*\e[00m"
    else
        echo "! $*"
    fi
}

ok_ko() {
    msg="$1"
    shift

    if "$@"; then
        ok "$msg"
        return 0
    else
        ko "$msg"
        return 1
    fi
}

JH_MSG_OK="$(echo -e "\033[01;32m✓\033[0m")"
JH_MSG_KO="$(echo -e "\033[01;31m✗\033[0m")"

ok() {
    if test -t 1; then
        echo -e "$JH_MSG_OK $*"
    else
        echo "✓ $*"
    fi
}

ko() {
    if test -t 1; then
        echo -e "$JH_MSG_KO $*"
    else
        echo "✗ $*"
    fi
}

parse_ok_ko() {
    while read -r L; do
        if [[ "$L" =~ ^ok\ * ]]; then
            echo "$JH_MSG_OK ${L/ok /}"
        elif [[ "$L" =~ ^ko\ * ]]; then
            echo "$JH_MSG_KO ${L/ko /}"
        else
            echo "$L"
        fi
    done
}
