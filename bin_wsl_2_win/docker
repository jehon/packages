#!/usr/bin/env bash

set -e

WSL_TRANSFORM=""
DOCKER_WIN="/mnt/c/Program Files/Docker/Docker/resources/bin/docker.exe"
DOCKER_TOOLBOX="/mnt/c/Program Files/Docker Toolbox/docker.exe"

if [ ! -d /c ]; then
	#
	# Using local docker forwarding to TCP: yes
	# Using docker.exe ???
	#
	echo "For docker in WSL to work, you need to mount C: to /c"
	echo "$ sudo ln -s /mnt/c /c"
	sudo ln -s /mnt/c /c
fi

if [ -x "/usr/bin/docker" ]; then
	#
	# Preferred as today 2019-06-04
    # With HyperV context
	#
	export DOCKER_HOST="tcp://localhost:2375"
	DOCKER="/usr/bin/docker"
else
	WSL_TRANSFORM="1"

	if [ -x "$DOCKER_WIN" ]; then
		# For with hyperV

		export DOCKER_HOST="tcp://localhost:2375"
		# winservice.sh waitstart com.docker.service
		DOCKER="$DOCKER_WIN"
	else
		# Tested on 2019-07-18
		# Without HyperV

		# With docker toolbox: go directly to there
		DOCKER="$DOCKER_TOOLBOX"
		WSL_TRANSFORM=""
	fi
fi

myargs=( )

adaptDir() {
	D="$1"
	if [[ $D =~ /\\wsl$\/.* ]]; then
		echo "$D"
		return
	fi

	D="$(realpath "$D" )"
	
	if [ ! -z "$WSL_TRANSFORM" ]; then
		D="$(wslpath -w "$D" )"
	fi
	D="${D//\/mnt\//\/}"
	if ! [[ $D =~ /[a-z]/.* ]]; then
		# if [ -z "$WSL_TRANSFORM" ]; then
		# 	# In case we are out of WSL shared folder, we release the folder
		# 	echo "$D"
		# 	return
		# fi
		echo "Could not map $D to a drive" >&2
		exit 255
	fi
	echo "$D"
}

if [ "$1" == "system" ] && [ "$2" == "prune" ]; then
	"${DOCKER}" system prune -f
	exit 0
fi

myargs=( )
NXT_V=""
# Change volume informations
for var in "${@}"; do
	if [[ "$var" == "-v" ]]; then
		NXT_V=1
	else
		if [ ! -z "$NXT_V" ]; then
			NXT_V=""
			if [[ $var =~ ^([^:]*):(.*)$ ]]; then
				# -v src:dest
				SRC=${BASH_REMATCH[1]}
				DST=${BASH_REMATCH[2]} # DST can contain a mode (/tmp,ro)

				var="$(adaptDir "$SRC"):$DST"
			fi
		fi
	fi

	if [[ $var =~ ^--volume=([^:]+):(.*)$ ]]; then
		SRC=${BASH_REMATCH[1]}
		DST=${BASH_REMATCH[2]} # DST can contain a mode (/tmp,ro)

		var="--volume=$(adaptDir "$SRC"):$DST"
	fi

	if [[ $var =~ ^(.*,)?source=([^,]*)(,.*)?$ ]]; then
		BEFORE=${BASH_REMATCH[1]}
		DIR=${BASH_REMATCH[2]}
		AFTER=${BASH_REMATCH[3]}

		var="${BEFORE}source=$( adaptDir "$DIR" )${AFTER}"
	fi
	myargs+=( "$var" )
done

# set -x
"$DOCKER" "${myargs[@]}"
