#
# See http://localhost:18080/configuration-as-code/reference
#    from local install of jenkins

configuration-as-code:
  deprecated: warn
  unknown: reject

jenkins:
  numExecutors: 0
  mode: NORMAL
  slaveAgentPort: 0

  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: true
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: ${ADMIN_USER}
          name: ${ADMIN_USER}
          password: ${ADMIN_PASSWORD}
          properties:
            - timezone:
                timeZoneName: ${readFile:/conf/generated/timezone}
            - sshPublicKey:
                authorizedKeys: ${readFile:/conf/generated/authorized_keys}

  remotingSecurity:
    enabled: true
  agentProtocols:
    # - "JNLP4-connect"
    - "Ping"
  views:
    - all:
        name: "All"
    - list:
        name: "Main"
        recurse: true
        includeRegex: "main"
        jobFilters:
        - "gitHubBranchFilter"
        # columns:
        # - "status"
        # - "weather"
        # - "jobName"
        # - "lastSuccess"
        # - "lastFailure"
        # - "lastDuration"
        # - "buildButton"
        # - "favoriteColumn"

  nodes:
    # https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/build_agents
    - permanent:
        name: "self"
        labelString: "docker"
        mode: NORMAL
        numExecutors: 1
        remoteFS: "/home/${JENKINS_SLAVE_USER}/jenkins-slave"
        launcher:
          ssh:
            host: "host.docker.internal"
            port: 22
            credentialsId: jenkins-master-to-slave-ssh
            javaPath: /usr/bin/java
            # launchTimeoutSeconds: 60
            # maxNumRetries: 3
            # retryWaitTime: 30
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false

security:
  sSHD:
    port: 2022

credentials:
  # https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/credentials
  # https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/docs/features/secrets.adoc#secret-sources

  system:
    domainCredentials:
      - credentials:
        - basicSSHUserPrivateKey:
            scope: SYSTEM
            id: jenkins-master-to-slave-ssh
            description: Connect to slaves
            username: ${JENKINS_SLAVE_USER}
            passphrase:
            privateKeySource:
              directEntry:
                privateKey: ${readFile:/conf/generated/jenkins-master-to-slave-ssh}

        - basicSSHUserPrivateKey:
            scope: GLOBAL
            id: jenkins-github-ssh
            description: Commit to GitHub
            username: ${GITHUB_USER}
            passphrase:
            privateKeySource:
              directEntry:
                privateKey: ${readFile:/conf/generated/jenkins-github-ssh}

        - usernamePassword:
            # View it https://github.com/settings/tokens
            # repo > *, user > read,email, admin:repo_hook > write:repo_hook
            scope: GLOBAL
            id: github-app
            description: View it https://github.com/settings/tokens
            username: ${GITHUB_USER}
            password: ${GITHUB_APP_TOKEN}
            description: GitHub connector through app

        - usernamePassword:
            scope: GLOBAL
            id: cryptomedic-upload
            description: cryptomedic-upload
            username: ${CRYPTOMEDIC_UPLOAD_USER}
            password: ${CRYPTOMEDIC_UPLOAD_PASSWORD}

        - string:
            scope: GLOBAL
            description: cryptomedic-deploy
            id: cryptomedic-deploy
            secret: ${CRYPTOMEDIC_DEPLOY}

        - file:
            # This work only if the original file is binary ???
            scope: GLOBAL
            id: git-crypt-key
            description: to unlock git crypted part
            fileName: git-crypt-key2
            secretBytes: ${readFileBase64:/conf/generated/git-crypt-key}

unclassified:
  location:
    url: ${JENKINS_URL}

  githubpluginconfig:
    configs:
      - name: GitHub
        # apiUrl: https://github.domain.local/api/v3
        credentialsId: github
        manageHooks: false

# https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/jobs
# https://jenkinsci.github.io/job-dsl-plugin/
jobs:
  # https://stackoverflow.com/questions/28488389/jenkins-how-to-run-one-housekeeping-job-on-all-nodes-slaves-master
  # https://jenkinsci.github.io/job-dsl-plugin/#path/freeStyleJob-triggers-cron
  - script: |
      job("workspace clean up") {
        description("Clean up docker data")
        keepDependencies(false)
        disabled(false)
        concurrentBuild(true)
        parameters {
          labelParam('Label') {
              defaultValue('docker')
              description('Select nodes')
              allNodes('allCases', 'IgnoreOfflineNodeEligibility')
          }
        }
        steps {
          shell('''
      set -o errexit
      ROOT="$( dirname "$( dirname "$( pwd )" )" )"
      echo "ROOT= $ROOT"
      cd "$ROOT" || exit 1
      docker run --rm -v "$(pwd):/app" -w /app bash chmod -R a+rwX .
      rm -fr "$ROOT/workspace"
      mkdir -p "$ROOT/workspace"
      mkdir -p "$ROOT/workspace/workspace clean up"

          ''')
        }
        steps {
          shell("docker system prune -f")
        }
        triggers {
          cron('@daily')
        }
      }

  - script: |
      organizationFolder('github') {
        description("GitHub organizationnal folder")
        displayName('github')
        organizations {
          github {
            repoOwner("${GITHUB_USER}")
            credentialsId("github-app")
            // https://www.reddit.com/r/jenkinsci/comments/ewe6mt/job_dsl_and_organizationfolder_with_github/
            // https://github.com/jenkinsci/github-branch-source-plugin/tree/master/src/main/java/org/jenkinsci/plugins/github_branch_source
            traits {
              webhookRegistrationTrait {
                mode('DISABLE')
              }

              gitHubBranchDiscovery {
                //  1 : Exclude branches that are also filed as PRs
                //  2 : Only branches that are also filed as PRs
                //  3 : All branches
                strategyId(1)
              }

              gitHubPullRequestDiscovery {
                //  1 : Merging the pull request with the current target branch revision
                //  2 : The current pull request revision
                //  3 : Both the current pull request revision and the pull request merged with the current target branch revision
                strategyId(2)
              }

              gitHubExcludeArchivedRepositories {}
            }
          }
        }

        triggers {
          periodicFolderTrigger {
            interval("1d")
          }
        }
      }
