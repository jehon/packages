#!/usr/bin/env bash

set -e

# shellcheck source=/dev/null
. jh-lib.sh

CRYPTED_SOURCE="${HOME}/.restricted"
CRYPTED_MOUNTED="${HOME}/Desktop/Private"
TO_BE_ENCRYPTED="${HOME}/Downloads/enc"

SECURITY_BACKUP="${CRYPTED_MOUNTED}/Security_Backup/"
SECURITY_BACKUP_AUTO="${SECURITY_BACKUP}/auto"
FIREFOX_PROFILE="${SECURITY_BACKUP}/firefox-private"

if [ ! -d "${CRYPTED_SOURCE}" ]; then
	echo "Encrypted source dir not found" >&2
	exit 255
fi

function start() {
	echo "Starting..."
	echo "Creating the ${CRYPTED_MOUNTED}"
	mkdir -p "${CRYPTED_MOUNTED}" || true

	if stat "${CRYPTED_MOUNTED}"/* >/dev/null 2>&1; then
		echo "ok, already mounted"
	else
		echo "Encore un secret???"

		if encfs -o allow_other -o uid=1000 -o gid=33 "${CRYPTED_SOURCE}" "${CRYPTED_MOUNTED}" ; then
			echo "Mounted"
		else
			echo "erreur in encfs: $?" >&2
			exit 255
		fi
		echo "Launching backup security in the background"
		backupSecurity &
	fi

	if stat "${TO_BE_ENCRYPTED}"/* >/dev/null 2>&1; then
		echo "Copying all files from ${TO_BE_ENCRYPTED} to encrypted dir"
		for F in "$TO_BE_ENCRYPTED"/* ; do
			echo "Moving $F"
			mv "$F" "${CRYPTED_MOUNTED}/"
		done
	fi

	echo "Started!"
}

function stop() {
	echo "Stopping..."
	echo "Purging trash"
	if [ -x "${CRYPTED_MOUNTED}"/.Trash-1000/ ]; then
		rm -fr "${CRYPTED_MOUNTED}"/.Trash-1000/*
		echo "done"
	else
		echo "Purging trash: folder was not mounted"
	fi

	if [ -r ~/.local/share/Trash/metadata ]; then
		echo "Purging metadata"
		rm -fr ~/.local/share/Trash/
	fi

	echo "Unmouning local"
	fusermount -u -z "${CRYPTED_MOUNTED}/"

	if [ -d "${CRYPTED_MOUNTED}" ]; then
		echo "Removing encrypted dir"
		rmdir "${CRYPTED_MOUNTED}"
	fi

	echo "Removing thumbnails"
	rm -fr ~/.thumbnails/

	echo "Stopped !"
	exit 0
}

DD=$( date "+%Y-%m-%d" )
function backupSecurityOne() {
	# 1: source
	# 2: target name

	echo "** Backup of $1 to $2"

	BACKUP="${SECURITY_BACKUP_AUTO}/$2"
	BACKUP_DIR="${SECURITY_BACKUP_AUTO}/$DD-$2"

	mkdir -p "$BACKUP"
	mkdir -p "$BACKUP_DIR"

	jh-rsync-backup.sh \
		"$1" "$BACKUP" \
		--backup --backup-dir "$BACKUP_DIR" \
		"${@:3}"

	if [ -z "$( ls -A "$BACKUP_DIR" )" ]; then
		rmdir "$BACKUP_DIR"
	fi
	echo "** Backup $1 done"
}

function backupSecurity() {
	# Personal keys
	backupSecurityOne "/home/jehon/.ssh/" "home-jehon"

	# Dev secrets
	backupSecurityOne "$PKG_FOLDER/../bin/" "home-jehon-secrets"

	backupSecurityOne "root@kiosk:/opt/kiosk/etc" "kiosk-opt-etc"

	backupSecurityOne "root@kiosk:/etc/jehon" "kiosk-etc"
}

function treatAction() {
	case "$1" in
		"s" | "forget" | "stop" )
			echo "Force unmounting"
			return 1
			;;
		"d" )
			start
			echo "Launching digikam"
			digikam --database-directory "${CRYPTED_MOUNTED}"/.metadata/ &
			;;
		"f" | "firefox" )
			start
			echo "Launching firefox with profile ${FIREFOX_PROFILE}"
			firefox -profile "${FIREFOX_PROFILE}" -no-remote &
			;;
		"n" )
			start
			echo "Launching nautilus"
			nautilus "${CRYPTED_MOUNTED}"/ &
			;;
		"b" )
			start
			echo "Launching backup"
			backupSecurity
			;;
	esac
	return 0
}

echo "Capturing exit code"
trap stop INT

if [ "$1" = "" ]; then
	treatAction "n"
else
	treatAction "$1"
fi

while echo -n "?" && read -r A; do
	echo "Action (s/d/f/n/b): $A"
	if ! treatAction "$A"; then
		echo "error?"
		break;
	fi
done
stop
